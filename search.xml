<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Jsoup抓取干货集中营闲读数据]]></title>
      <url>http://dalingge.com/2017/05/09/%E4%BD%BF%E7%94%A8Jsoup%E6%8A%93%E5%8F%96%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5%E9%97%B2%E8%AF%BB%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="Jsoup介绍"><a href="#Jsoup介绍" class="headerlink" title="Jsoup介绍"></a>Jsoup介绍</h2><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
<p>关于Jsoup的介绍，请访问Jsoup的官网：<a href="http://jsoup.org/" target="_blank" rel="external">http://jsoup.org/</a></p>
<p>关于Jsoup的jar包下载地址：<a href="http://jsoup.org/download" target="_blank" rel="external">http://jsoup.org/download</a></p>
<p>关于Jsoup的官网API文档查询：<a href="http://jsoup.org/apidocs/" target="_blank" rel="external">http://jsoup.org/apidocs/</a></p>
<p>关于Jsoup的中文使用示例：<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">http://www.open-open.com/jsoup/</a></p>
<h2 id="干货集中营"><a href="#干货集中营" class="headerlink" title="干货集中营"></a>干货集中营</h2><p>干货集中营是代码家大神做的一款每周一至周五中午都会分享妹子图和技术干货网站，可以通过API，获取公开数据。</p>
<p>大家通过开放API练习开发自己的APP集中营，现在网上流传这各式各样的APP，但是犹豫受到了接口的限制（毕竟大神都是很忙的），所以不能做出自己理想的APP。</p>
<p>今天就教大家使用Jsoup来获取集中营当中闲读的数据。</p>
<p>下面言归正传…</p>
<h2 id="抓取需要的数据"><a href="#抓取需要的数据" class="headerlink" title="抓取需要的数据"></a>抓取需要的数据</h2><p>首先进入<a href="http://gank.io/xiandu" target="_blank" rel="external">闲读</a>直接右键显示网页源码(或者F12)；我们可以看到很多HTML+CSS标签；我使用的是Google Chrome浏览器；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xiandu_cat"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #747474;"</span> <span class="attr">href</span>=<span class="string">"/xiandu"</span>&gt;</span>科技资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/apps"</span>&gt;</span>趣味软件/游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/imrich"</span>&gt;</span>装备党<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/funny"</span>&gt;</span>草根新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/android"</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/diediedie"</span>&gt;</span>创业新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/thinking"</span>&gt;</span>独立思想<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/iOS"</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xiandu/teamblog"</span>&gt;</span>团队博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里直接找到要抓取的数据闲读分类，之后需要分析是从什么节点开始才是一条数据；就好比数组[{},{}]一样；里面每个数据都是以什么开头的；这里分析之后可以看到是以<code>&lt;div id=&quot;xiandu_cat&quot;&gt;</code>为节点就是一组数据；<code>&lt;a&gt;</code>相当于一条数据，需要获取标签里面分类名字和分类的href；</p>
<p>我们所需要的东西已经找到；接下来我们去抓取出数据封装一下就可以用了；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">List&lt;ReadTypeBean&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Document doc = Jsoup.connect(<span class="string">"http://gank.io/xiandu"</span>).get();</div><div class="line">    Elements tads = doc.select(<span class="string">"div#xiandu_cat"</span>).select(<span class="string">"a"</span>);</div><div class="line">    <span class="keyword">for</span> (Element tad : tads) &#123;</div><div class="line">        ReadTypeBean bean = <span class="keyword">new</span> ReadTypeBean();</div><div class="line">        bean.setTitle(tad.text());<span class="comment">//获取标题</span></div><div class="line">        bean.setUrl(tad.absUrl(<span class="string">"href"</span>));<span class="comment">//absUrl可以获取地址的绝对路径</span></div><div class="line">        datas.add(bean);</div><div class="line">        Log.v(<span class="string">"Jsoup"</span>,<span class="string">"title= "</span>+bean.getTitle()+<span class="string">"   url= "</span>+bean.getUrl());</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    subscriber.onError(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到先是通过Jsoup.connect(url).get();获取一个Document；</p>
<p>这样就可以通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据；</p>
<p>首先解析上面说的节点<code>&lt;div id=&quot;xiandu_cat&quot;&gt;</code>下面的所有<code>&lt;a&gt;</code>标签，会得到一个Elements通过for循环取出需要的数据；</p>
<p>text()获取标签中的文本，absUrl(“href”) 提取地址的绝对路径；</p>
<p><img src="/img/jsoup/AACA7FE3-3EF8-41AC-A5E5-F92012528057.png" alt=""></p>
<p>可以看到我们需要的数据已经打印出来了;</p>
<h3 id="下面就是提取页面上的子分类和列表数据"><a href="#下面就是提取页面上的子分类和列表数据" class="headerlink" title="下面就是提取页面上的子分类和列表数据"></a>下面就是提取页面上的子分类和列表数据</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;div class="xiandu_choice"&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;a href="/xiandu/view/engadget"&gt;</div><div class="line">                    &lt;img src="http://ww1.sinaimg.cn/large/0066P23Wjw1f9rym3y697j30300300sj.jpg" title="Engadget 中文版" alt="" class="site-img"&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line"></div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;a href="/xiandu/view/williamlong"&gt;</div><div class="line">                    &lt;img src="http://ww2.sinaimg.cn/large/0066P23Wjw1f9u8ddodymj3020020wea.jpg" title="月光博客" alt="" class="site-img"&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line"></div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>同理找到子分类<code>&lt;div id=&quot;xiandu_choice&quot;&gt;</code>为节点的数据；和上面的的分类同样的方法获取即可</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xiandu_item"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xiandu_left"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upvote"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"xiandu_index"</span>&gt;</span>1:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site-title"</span></span></div><div class="line">                <span class="attr">href</span>=<span class="string">"http://www.ifanr.com/832492?utm_medium=website&amp;amp;utm_source=gank.io%2Fxiandu"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;在通往信用社会的路上，学会用芝麻分“薅羊毛”也是一件正经事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">small</span>&gt;</span></div><div class="line">                         16 分钟前</div><div class="line">                     <span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xiandu_right"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site-name"</span> <span class="attr">href</span>=<span class="string">"/xiandu/view/ifanr"</span></span></div><div class="line">                <span class="attr">title</span>=<span class="string">"爱范儿"</span></div><div class="line">                <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</div><div class="line">                 <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ww3.sinaimg.cn/large/0066P23Wjw1f9rylijz6rj3030030gle.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"site-img"</span>/&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面可以看到<code>&lt;div class=&quot;axiandu_item&quot;&gt;</code>为节点就是一条数据；里面有两个<code>div</code>节点，我们需要的详情连接和标题是在<code>&lt;div class=&quot;xiandu_left&quot;&gt;</code>层下的标签<code>&lt;a href&gt;</code>中；<br>我们需要的图片和类别是在<code>&lt;div class=&quot;xiandu_right-intro&quot;&gt;</code>层下的<code>&lt;img src&gt;</code>里面；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ReadTypeBean readTypeBean = <span class="keyword">new</span> ReadTypeBean();</div><div class="line">readTypeBean.setTitle(requestContext.getType());</div><div class="line">readTypeBean.setUrl(requestContext.getUrl());</div><div class="line">List&lt;ReadChildTypeBean&gt; readChildTypeBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">List&lt;ReadListBean&gt; readListBeanList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Document doc = Jsoup.connect(requestContext.getUrl()).get();</div><div class="line">    Elements childs = doc.select(<span class="string">"div.xiandu_choice"</span>).select(<span class="string">"a"</span>);<span class="comment">//提取子分类</span></div><div class="line">    <span class="keyword">for</span> (Element child : childs) &#123;</div><div class="line">        ReadChildTypeBean bean = <span class="keyword">new</span> ReadChildTypeBean();</div><div class="line">        Elements img = child.select(<span class="string">"img"</span>);</div><div class="line">        bean.setTitle(img.attr(<span class="string">"title"</span>));</div><div class="line">        bean.setImg(img.attr(<span class="string">"src"</span>));</div><div class="line">        bean.setUrl(child.absUrl(<span class="string">"href"</span>));</div><div class="line">        readChildTypeBeanList.add(bean);</div><div class="line">    &#125;</div><div class="line">    Elements items = doc.select(<span class="string">"div.xiandu_item"</span>);<span class="comment">//提取列表数据</span></div><div class="line">    <span class="keyword">for</span> (Element item : items) &#123;</div><div class="line">        ReadListBean bean = <span class="keyword">new</span> ReadListBean();</div><div class="line">        Elements aLeft = item.select(<span class="string">"div.xiandu_left"</span>).select(<span class="string">"a"</span>);</div><div class="line">        bean.setTitle(aLeft.text());</div><div class="line">        bean.setLink(aLeft.attr(<span class="string">"href"</span>));</div><div class="line">        bean.setTime(item.select(<span class="string">"small"</span>).text());</div><div class="line">        Elements aRight = item.select(<span class="string">"div.xiandu_right"</span>).select(<span class="string">"a"</span>);</div><div class="line">        bean.setSource(aRight.attr(<span class="string">"title"</span>));</div><div class="line">        bean.setLogo(aRight.select(<span class="string">"img"</span>).attr(<span class="string">"src"</span>));</div><div class="line">        readListBeanList.add(bean);</div><div class="line">    &#125;</div><div class="line">    Element button = doc.select(<span class="string">"a.button"</span>).last();<span class="comment">//提取下一页数据</span></div><div class="line">    readTypeBean.setPage(button.absUrl(<span class="string">"href"</span>));</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    subscriber.onError(e);</div><div class="line">&#125;</div><div class="line">readTypeBean.setReadListBeanList(readListBeanList);</div><div class="line">readTypeBean.setReadChildTypeBeanList(readChildTypeBeanList);</div></pre></td></tr></table></figure>
<p>上面的就是获取所有分类页面的数据，可以看到在最后面还有<code>doc.select(&quot;a.button&quot;).last();</code>，通过分析html代码页面上有两个button类型的<a>标签，使用last()得到最后一位button的地址就是下一页面的数据，从而实现上拉分页的效果。</a></p>
<h2 id="封装使用"><a href="#封装使用" class="headerlink" title="封装使用"></a>封装使用</h2><p>接着我们就是接收跟封装数据了，毕竟我们习惯了后台服务器返回的那种json数据；接下来写一个简易的Bean类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadTypeBean</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String page;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> page;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(String page)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.page = page;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/img/jsoup/S70508-10435784.jpg" alt=""></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>在这里我们还可以是使用<a href="https://github.com/VictorAlbertos/RxCache" target="_blank" rel="external">RxCache</a>来对数据进行缓存，比如分类可以永久缓存到本地，以节省网络资源的浪费。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取闲读分类信息</div><div class="line">    * 永久</div><div class="line">    * <span class="doctag">@param</span> oRepos 缓存数据</div><div class="line">    * <span class="doctag">@param</span> userName</div><div class="line">    * <span class="doctag">@param</span> evictDynamicKey false使用缓存  true 加载数据不使用缓存</div><div class="line">    * <span class="doctag">@return</span> 数据</div><div class="line">    */</div><div class="line">  Observable&lt;Reply&lt;List&lt;ReadTypeBean&gt;&gt;&gt; getTypeList(Observable&lt;List&lt;ReadTypeBean&gt;&gt; repos, DynamicKey userName, EvictDynamicKey evictDynamicKey);</div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 获取闲读分类下对应类别</div><div class="line">    * 缓存时间 1天</div><div class="line">    * <span class="doctag">@param</span> oRepos  缓存数据</div><div class="line">    * <span class="doctag">@param</span> userName</div><div class="line">    * <span class="doctag">@param</span> evictDynamicKey false使用缓存  true 加载数据不使用缓存</div><div class="line">    * <span class="doctag">@return</span> 数据</div><div class="line">    */</div><div class="line">   <span class="meta">@LifeCache</span>(duration = <span class="number">1</span>, timeUnit = TimeUnit.DAYS)</div><div class="line">   Observable&lt;Reply&lt;ReadTypeBean&gt;&gt; getStackTypeList(Observable&lt;ReadTypeBean&gt; repos, DynamicKey userName, EvictDynamicKey evictDynamicKey);</div></pre></td></tr></table></figure>
<p>部分代码</p>
<p>项目地址请移步<a href="https://github.com/dalingge/GankGirl" target="_blank" rel="external">Github</a>，欢迎Star，Issues，给予鼓励是继续完善与维护的动力！</p>
<p>祝大家撸码愉快！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[西安之旅]]></title>
      <url>http://dalingge.com/2017/05/05/%E8%A5%BF%E5%AE%89%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<h2 id="何处可为别？长安青绮门。-–李白"><a href="#何处可为别？长安青绮门。-–李白" class="headerlink" title="何处可为别？长安青绮门。 –李白"></a><strong>何处可为别？长安青绮门。 –李白</strong></h2><p>西安，</p>
<p>古称长安。</p>
<p>是秦人祖祖辈辈的征程，</p>
<p>是《马克·菠萝游记》中著名的古丝绸之路的起点，</p>
<p>是当是这个星球上最伟大的城池。</p>
<p>罗马哲人奥古斯说过“一座城市的历史就是一个民族的历史”</p>
<p>这座永恒的城市，</p>
<p>就像一部活历史，</p>
<p>记录着中华民族的沧桑巨变。</p>
<h3 id="2017年4月29日晚9点抵达咸阳机场"><a href="#2017年4月29日晚9点抵达咸阳机场" class="headerlink" title="2017年4月29日晚9点抵达咸阳机场"></a>2017年4月29日晚9点抵达咸阳机场</h3><p>找到酒店安顿就位去品尝了下羊肉泡面，羊肉泡馍是陕西的风味美馔，尤以西安最享盛名。它烹制精细，料重味醇，肉烂汤浓，肥而不腻，营养丰富，香气四溢，诱人食欲，食后回味无穷。</p>
<p><img src="/img/XiAn/IMG_3556.jpg" alt="陕西美食羊肉泡面"></p>
<h3 id="开始第一天的旅程"><a href="#开始第一天的旅程" class="headerlink" title="开始第一天的旅程"></a>开始第一天的旅程</h3><h4 id="世界八大奇迹之一的兵马俑"><a href="#世界八大奇迹之一的兵马俑" class="headerlink" title="世界八大奇迹之一的兵马俑"></a>世界八大奇迹之一的兵马俑</h4><p>铜马车整体用青铜铸造，采用了铸造、镶嵌、焊接、子母扣连接、活铰连接等多种工艺组装而成，是我国考古史上截至目前出土的体型最大、结构最复杂、系驾关系最完整古代车马，被誉为“青铜之冠”。</p>
<p><img src="/img/XiAn/IMG_3565.jpg" alt="秦陵一号铜马车"></p>
<p><img src="/img/XiAn/IMG_3567.jpg" alt="秦陵二号铜马车"></p>
<p>仿佛看到了那个赳赳老秦、共赴国难、血不流干、誓不休战的大秦帝国！</p>
<p>“朕统六国，天下归一，筑长城以镇九州龙脉，卫我大秦、护我社稷。朕以始皇之名在此立誓！朕在，当守土开疆，扫平四夷，定我大秦万世之基！朕亡，亦将身化龙魂，佑我华夏永世不衰！此誓，日月为证，天地共鉴，仙魔鬼神共听之！”     –始皇</p>
<p>始皇霸气绝伦，无人可比，人世间的霸气尽显于此。</p>
<p><img src="/img/XiAn/IMG_3571.jpg" alt="秦兵马俑一号坑"></p>
<p><img src="/img/XiAn/IMG_3569.jpg" alt="秦兵马俑二号坑"></p>
<p><img src="/img/XiAn/IMG_3578.jpg" alt="秦兵马俑三号坑"></p>
<p>《史记》中记载：始皇初即位，穿治郦山，及并天下，天下徒送诣七十馀万人，穿三泉，下铜而致椁，宫观百官奇器珍怪徙臧满之。令匠作机弩矢，有所穿近者辄射之。以水银为百川江河大海，机相灌输，上具天文，下具地理。以人鱼膏为烛，度不灭者久之。</p>
<p>据说墓里面有秦帝国三十年赋税的三分之一。</p>
<p><img src="/img/XiAn/IMG_3580.jpg" alt="秦始皇封土堆"></p>
<h4 id="骊山华清池"><a href="#骊山华清池" class="headerlink" title="骊山华清池"></a>骊山华清池</h4><p>天下温泉二千六，惟有华清为第一。</p>
<p><img src="/img/XiAn/IMG_3583.jpg" alt="长生殿"></p>
<p>贵妃就是在这和他第一位老公和第一位老公的爸爸就是第二任老公李隆基还有干儿子安禄山曾经在里发生了很多语言不可描述的事情。</p>
<p><img src="/img/XiAn/IMG_3584.jpg" alt="杨贵妃"></p>
<p><img src="/img/XiAn/IMG_3588.jpg" alt="温泉"></p>
<h4 id="夜晚回民街"><a href="#夜晚回民街" class="headerlink" title="夜晚回民街"></a>夜晚回民街</h4><p>强力推荐老孙家的biangbiang面真是超赞。</p>
<p><img src="/img/XiAn/IMG_3604.jpg" alt="biangbiang面"></p>
<p><img src="/img/XiAn/IMG_3605.jpg" alt="回民街"></p>
<p><img src="/img/XiAn/IMG_3602.jpg" alt="钟楼"></p>
<h3 id="第二天的市内之旅"><a href="#第二天的市内之旅" class="headerlink" title="第二天的市内之旅"></a>第二天的市内之旅</h3><h4 id="碑林博物馆"><a href="#碑林博物馆" class="headerlink" title="碑林博物馆"></a>碑林博物馆</h4><p>西安碑林创建于公元1087年，是收藏我国古代碑石时间最早、数目最大的一座艺术宝库，陈列有从汉到清的各代碑石、墓志共一千多块。这里碑石如林，故名碑林。</p>
<p><img src="/img/XiAn/IMG_3611.jpg" alt="孔庙"></p>
<p>瞻仰了下书圣王羲之的书法，果然不同凡响。（其实我啥也没看出来）</p>
<p><img src="/img/XiAn/IMG_3621.jpg" alt="三藏圣教序碑"></p>
<p>这些巨大的石雕完全提现了当时唐朝的霸气</p>
<p><img src="/img/XiAn/IMG_3640.jpg" alt="biangbiang面"></p>
<p><img src="/img/XiAn/IMG_3641.jpg" alt="石犀"></p>
<h4 id="陕西历史博物观"><a href="#陕西历史博物观" class="headerlink" title="陕西历史博物观"></a>陕西历史博物观</h4><p>去博物馆之前去品尝了最著名的肉夹馍和凉皮，强力推荐赵记肉夹馍。</p>
<p><img src="/img/XiAn/IMG_3650.jpg" alt="肉夹馍和凉皮"></p>
<p>陕西历史博物馆建筑的外观着意突出了盛唐风采，长安自古帝王都，历史上先后有周、秦、汉、隋、唐等十三个封建王朝在此建都，具有丰富的地上地下文物，形成了陕西独特的历史文化风貌。陕西历史博物馆建成后，集中珍藏陕西地区出土的珍贵文物37万余件。</p>
<p><img src="/img/XiAn/IMG_3651.jpg" alt="陕西历史博物观"></p>
<p><img src="/img/XiAn/IMG_3652.jpeg" alt="精美绝伦"></p>
<h4 id="大雁塔和亚洲最大音乐喷泉"><a href="#大雁塔和亚洲最大音乐喷泉" class="headerlink" title="大雁塔和亚洲最大音乐喷泉"></a>大雁塔和亚洲最大音乐喷泉</h4><p><img src="/img/XiAn/IMG_3678.jpg" alt="大雁塔"></p>
<video id="video" controls preload="none" poster="/img/XiAn/IMG_3679.jpg"><br>      <source id="mp4" src="/img/XiAn/pengc.mp4" type="video/mp4"><br></video>

<h3 id="第三天华山论剑"><a href="#第三天华山论剑" class="headerlink" title="第三天华山论剑"></a>第三天华山论剑</h3><p>华山，古称“西岳”，雅称“太华山”，为中国著名的五岳之一，中华文明的发祥地，“中华”和“华夏”之“华”，就源于华山。  </p>
<p>华山是道教主流全真派圣地，为“第四洞天”，也是中国民间广泛崇奉的神祇，即西岳华山君神。截至2013年华山共有72个半悬空洞，道观20余座，其中玉泉院、都龙庙、东道院、镇岳宫被列为全国重点道教宫观，有陈抟、郝大通、贺元希等著名的道教高人。</p>
<p><img src="/img/XiAn/IMG_3702.JPG" alt="华山"></p>
<p><img src="/img/XiAn/IMG_3703.jpg" alt="龙脉"></p>
<p><img src="/img/XiAn/IMG_3790.jpg" alt="北峰之巅"></p>
<h3 id="第四天返回帝都"><a href="#第四天返回帝都" class="headerlink" title="第四天返回帝都"></a>第四天返回帝都</h3><p>怀念那个赳赳老秦、共赴国难、血不流干、誓不休战的大秦帝国！</p>
<p>怀念那个犯我华夏天威、虽远必诛的大汉帝国！</p>
<p>怀念那个四方胡虏、凡有敢犯者、必亡其国、灭其种、绝其苗裔的大隋帝国！</p>
<p>怀念那个内外诸夷、凡敢称兵者皆斩的大唐帝国！</p>
<p>西安，这是一个你不来一定会遗憾的城市，也是一个你走了一定会怀念的城市。</p>
<p>西安，这里充满了历史遗留的痕迹。</p>
<p>西安，再见。</p>
<p>我还会在来的！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年度总结知行合一]]></title>
      <url>http://dalingge.com/2016/12/30/2016%E5%B9%B4%E5%8B%BF%E5%BF%98%E5%88%9D%E5%BF%83%EF%BC%8C%E6%96%B9%E5%BE%97%E5%A7%8B%E7%BB%88/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>抓住2016的最后一个工作日，写一篇年终总结，转眼之间，一年的时光已经悄然消逝。想写点什么，却发现早已习惯复制粘贴的我，在这一刻竟有点无从下手。想来想去，还是用几个关键词总结一下我的2016吧。</p>
<h2 id="帝都"><a href="#帝都" class="headerlink" title="帝都"></a>帝都</h2><p>帝都雾霾严重，帝都人山人海，帝都……，一提到帝都，很多人脑海中就出现这样的关键词，但不可否认，只要你努力，帝都有更多的机会和资源，机会每周都要技术开发的大会，为年轻人学习交流提供很好的平台。</p>
<h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>可以说2016年是我快速成长的一年。</p>
<h3 id="关于技术学习"><a href="#关于技术学习" class="headerlink" title="关于技术学习"></a>关于技术学习</h3><ul>
<li>学习了很多新技术。如RxJava，Retrofit，MVP模式等。</li>
<li>提升了在实际项目中的应用</li>
<li>懂得分享在GitHub开源了3个项目</li>
<li>对开发有了更深的理解</li>
<li>成功搭建了自己博客</li>
</ul>
<h3 id="关于读书"><a href="#关于读书" class="headerlink" title="关于读书"></a>关于读书</h3><ul>
<li>《Android群英传》</li>
<li>《Android源码设计模式解析与实践》</li>
<li>《帝王师：刘伯温》</li>
<li>《知行合一：王阳明》</li>
<li>《传习录》</li>
<li>《曾国潘：又笨又慢平天下》</li>
<li>《嗜血的皇冠：汉光武皇帝刘秀》</li>
<li>《秦崩：从秦始皇到刘邦的秘密》</li>
<li>《激荡的三十年》<br>自知要多读书，脑子空，没货。</li>
</ul>
<h3 id="学会了照顾自己与他人。"><a href="#学会了照顾自己与他人。" class="headerlink" title="学会了照顾自己与他人。"></a>学会了照顾自己与他人。</h3><h3 id="学会了分享与祝福。"><a href="#学会了分享与祝福。" class="headerlink" title="学会了分享与祝福。"></a>学会了分享与祝福。</h3><h2 id="心学"><a href="#心学" class="headerlink" title="心学"></a>心学</h2><p>人生两次接受哲学，一次是来这世界整整二十年的经历，它缓慢沉积我的积淀；一次是学习心学。越长大，反而不再有个体的过分张扬与自信，变为感受到自身的渺小，困惑越来越多，纠结于自己的每一次行事与选择中。曾尝试与他人对话，却发现这是怎么如何与人沟通却都无法平定已经乱的了心弦，纵使知道应该对自己说什么，明白别人为什么那样说，理解自己应该怎么想，终究抵不过心里无法控制的感觉。那是一种奇怪的感觉，不知先生在寻圣人的路上是否有过，总觉得哪里差了一点，确是远方天与地之间的分隔线。一线，两方。<br>回忆着内心曾有的困惑，嘴角却不禁露出微笑。我想起自己无意翻书之时，那些用最传统中国文字记录的话语，那是千百年前古人就给出了的解答。写到这里，我的脑海里慢慢出现了一个人物——王阳明。喜欢这个人，不如说是这个人身上有太多我渴望而却还尚未拥有的东西。崇拜这个人，是他可以自信地说出“要做圣人”，虽处逆境却有平淡之心。整整令人敬佩之人，不在于他有多生事业上的成功，而是那独特的内心。仿佛冬夜之寒梅，吸引我的早已不是它嫩黄的身影，而是那抹最是沁人的暗香。  </p>
<ul>
<li>无善无恶心之体，</li>
<li>有善有恶意之动，</li>
<li>知善知恶是良知，</li>
<li>为善去恶是格物。</li>
<li>——王阳明四句教</li>
</ul>
<p>究竟人生为何？我想向苍穹呐喊，它却静静对我微笑，默默无声。这时，先生告诉我，“乾坤由我在，安用他求为?千圣皆过影，良知乃吾师。”世俗可变，但内心中，良知二字不朽！</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>立志用功，如树使然。方其根芽，犹未有干；及其有干，尚未有枝。枝而后叶，叶而后花、实。初种根时，只管栽培灌溉，勿作枝想，勿作叶想，勿作花想，勿作实想，悬想何益？但不忘栽培之功，怕没有枝叶花实？    –王阳明《传习录》</p>
<p>先生此处指回到事物的本原，不前瞻后顾，心无旁骛地、纯粹地去做一件事。</p>
<p>我想不会有比这更“活在当下“的人生态度。</p>
<p>2016年12月31日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿简书滑动伸缩效果]]></title>
      <url>http://dalingge.com/2016/12/25/%E4%BB%BF%E7%AE%80%E4%B9%A6%E6%BB%91%E5%8A%A8%E4%BC%B8%E7%BC%A9%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>效果图：</p>
<p><img src="/img/search.gif" alt=""></p>
<p>项目地址请移步<a href="https://github.com/dalingge/SearchAnimView" target="_blank" rel="external">Github</a>，欢迎Star，Issues，给予鼓励是继续完善与维护的动力！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[参加Google开发者大会体验]]></title>
      <url>http://dalingge.com/2016/12/08/%E5%8F%82%E5%8A%A0Google%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>第一次参加怎么高逼格的大会内心还是比较激动的</p>
<h2 id="7点50到达国家会议中心"><a href="#7点50到达国家会议中心" class="headerlink" title="7点50到达国家会议中心"></a>7点50到达国家会议中心</h2><p><img src="/img/GDD/IMG_7598.jpeg" alt=""></p>
<h2 id="进门就看到了我大Android机器人"><a href="#进门就看到了我大Android机器人" class="headerlink" title="进门就看到了我大Android机器人"></a>进门就看到了我大Android机器人</h2><p><img src="/img/GDD/IMG_5577.jpeg" alt=""></p>
<h2 id="8点准时开始入场签到，前面好长的人龙"><a href="#8点准时开始入场签到，前面好长的人龙" class="headerlink" title="8点准时开始入场签到，前面好长的人龙"></a>8点准时开始入场签到，前面好长的人龙</h2><p><img src="/img/GDD/IMG_2922.jpeg" alt=""></p>
<h2 id="签到成功领取了Google礼品和胸卡"><a href="#签到成功领取了Google礼品和胸卡" class="headerlink" title="签到成功领取了Google礼品和胸卡"></a>签到成功领取了Google礼品和胸卡</h2><p><img src="/img/GDD/IMG_2297.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_8750.jpeg" alt=""></p>
<h2 id="进入主会场"><a href="#进入主会场" class="headerlink" title="进入主会场"></a>进入主会场</h2><p><img src="/img/GDD/IMG_8189.jpeg" alt=""></p>
<h2 id="找了个比较考前的位置途中还换取了同步传声装置，酷酷的"><a href="#找了个比较考前的位置途中还换取了同步传声装置，酷酷的" class="headerlink" title="找了个比较考前的位置途中还换取了同步传声装置，酷酷的"></a>找了个比较考前的位置途中还换取了同步传声装置，酷酷的</h2><p><img src="/img/GDD/IMG_3222.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_3226.jpeg" alt=""></p>
<h2 id="9点大会开始喽！直接看图吧"><a href="#9点大会开始喽！直接看图吧" class="headerlink" title="9点大会开始喽！直接看图吧"></a>9点大会开始喽！直接看图吧</h2><p><img src="/img/GDD/IMG_3932.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_4525.jpeg" alt=""></p>
<h2 id="11点30准时开饭，参加了怎么多开发者大会第一次吃到伙食怎么好的"><a href="#11点30准时开饭，参加了怎么多开发者大会第一次吃到伙食怎么好的" class="headerlink" title="11点30准时开饭，参加了怎么多开发者大会第一次吃到伙食怎么好的"></a>11点30准时开饭，参加了怎么多开发者大会第一次吃到伙食怎么好的</h2><p><img src="/img/GDD/IMG_2767.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_5577.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_3947.jpeg" alt=""></p>
<h2 id="一位十多岁的Android开发者"><a href="#一位十多岁的Android开发者" class="headerlink" title="一位十多岁的Android开发者"></a>一位十多岁的Android开发者</h2><p><img src="/img/GDD/IMG_3241.jpeg" alt=""></p>
<h2 id="下午还水果吃领奖了大会礼品，很丑的一个Android娃娃"><a href="#下午还水果吃领奖了大会礼品，很丑的一个Android娃娃" class="headerlink" title="下午还水果吃领奖了大会礼品，很丑的一个Android娃娃"></a>下午还水果吃领奖了大会礼品，很丑的一个Android娃娃</h2><p><img src="/img/GDD/IMG_3255.jpeg" alt=""></p>
<p><img src="/img/GDD/IMG_3252.jpeg" alt=""></p>
<h2 id="其实还有很多精彩内容我都是通过手机视屏录制的"><a href="#其实还有很多精彩内容我都是通过手机视屏录制的" class="headerlink" title="其实还有很多精彩内容我都是通过手机视屏录制的"></a>其实还有很多精彩内容我都是通过手机视屏录制的</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[青春向左，魔兽向右]]></title>
      <url>http://dalingge.com/2016/06/08/%E9%9D%92%E6%98%A5%E5%90%91%E5%B7%A6%EF%BC%8C%E9%AD%94%E5%85%BD%E5%90%91%E5%8F%B3/</url>
      <content type="html"><![CDATA[<p>回望再回望，厉兵秣马的战场<br>握拳再握拳，守护家园的理想<br>远眺再远眺，无尽征途的前方<br>荣光不落！信仰不灭！<br>为了联盟！为了部落！</p>
<p>魔兽对于我来说就像初恋</p>
<p>仍时不时地关注着她的最新动态</p>
<p>但是再也不会上“她”了</p>
<p>曾经有句这样的典故：</p>
<p>如果你第一次玩网游就选上了《魔兽世界》；</p>
<p>那本尊告诉你；</p>
<p>你很不幸；</p>
<p>因为它将是你最后一次玩的网游；</p>
<p>如果你是第N次玩网游再遇上了《魔兽世界》；</p>
<p>那本尊再告诉你；</p>
<p>你很幸运；</p>
<p>你终于找到你想要的了。</p>
<p>那些年：</p>
<p>还未脱下又丑又土的运动校服，放学就去“黑网吧”打上一把魔兽；</p>
<p>花几周时间攒下的饭钱买点卡刷金，起上千金坐骑；</p>
<p>艰难地记住建造，升级的快捷键，一次又一次练习按键直至盲打；</p>
<p>我们看过号角吹响，铁剑一挥的万军冲锋；</p>
<p>我们目睹无数精灵为守护世界之树的牺牲；</p>
<p>我们见证过阿尔萨斯登上巫妖王座傲视天下；</p>
<p>我们围攻黑暗神殿，把伊利丹打哭还抢夺了他的武器；</p>
<p><img src="/img/WOW/yilidan.jpeg" alt="服务器首杀伊利丹"></p>
<p>我们攻克冰冠堡垒，把巫妖王阿尔萨斯按在地上蹂躏；</p>
<p><img src="/img/WOW/wuyaowang.jpeg" alt="十人小分队干倒巫妖王"></p>
<p>我们守护海加尔山，把阿克蒙德的燃烧军团殴打成灰。</p>
<p><img src="/img/WOW/akemengde.jpeg" alt="服务器首杀阿克蒙德"></p>
<p>多年过去：</p>
<p>“暴风城永不陷落！”“兽人永不为奴！”的呐喊；</p>
<p>已被掩埋在工作的繁忙、生活的琐碎之中；</p>
<p>公会已不再定期开团刷本，玩家QQ群也沉静很久；</p>
<p>直到我们听到《魔兽世界》电影上映的消息——</p>
<p>这消息宛若</p>
<p>暴风城圣光大教堂敲响的钟声</p>
<p>奥格瑞玛擂响的隆隆战鼓</p>
<p>召唤我们重新回归</p>
<p>回到艾泽拉斯大陆的怀抱</p>
<p>重拾铁剑、战斧、长弓</p>
<p>重拾满腔热血</p>
<p>重拾这个纯粹而炽烈的梦</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C语言基础]]></title>
      <url>http://dalingge.com/2016/05/05/Objective-C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>我学习IOS的一个记录笔记</p>
<h2 id="面向对象的编程"><a href="#面向对象的编程" class="headerlink" title="面向对象的编程"></a>面向对象的编程</h2><p>OO：面向对象<br>OOA：分析<br>OOD：设计<br>OOP：实现<br>优点：易于维护和扩展<br>核心思想：封装，继承，多态<br>类：类是抽象的<br>对象：对象是类中的个体，成员<br>类和对象的关系：类是对象的抽象和封装;对象是类的实例化，个体化，具体化。<br>定义类：<br>方法：+表示静态方法 访问通过[类名 方法名]<br>           -表示实例方法 访问通过[对象名 方法名]<br>无参数：方法的修饰 （返回类型） 方法名{}<br>有参数：方法的修饰 （返回类型） 方法名：（类型）名 ：（类型）名。。。。{}</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装：如果是@public违反了，面向对象的三大特征<br>方法定义时：-set首字母大写<br>-get首字母大写<br>简便方法: @property (readwrite) int cId; //相当于.h文件声明 readwrite 读写<br>@synthesize cId;//相当于.m文件定义<br>@property(assign,nonatomic) NSString * loginid;<br>内存计数器，线程安全管理<br>基本数据类型用 assign<br>对象类型用 strong</p>
<p>属性的属性<br>第一类：读写性控制（readonly、readwrite、setter、getter）<br>readonly，告诉编译器，只声明getter方法（无setter方法）。<br>例：@property(readonly)NSString * name;</p>
<p>第二类：原子性控制（nonatomic、atomic）<br>atomic：setter、getter方法在多线程访问下是绝对安全的，即setter、getter内部做了多线程访问处理。原子性控制的默认设置是 atomic。<br>noatomic：setter、getter方法内部不会做多线程访问处理，仅仅是普通的setter、getter方方法。</p>
<p>第三类：语义设置（assign[week]、retain[strong]、copy）<br>assign：setter、getter内部实现是直接赋值。基本数据类型不需要内存优化<br>retain：setter、getter的内部实现会做内存优化。 类类型需要内存优化</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1：解决代码冗余 【多个类有相同的代码】<br>2：易于维护和扩展<br>3：多态</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>继承 协议</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>NSString：不可便字符串，即：创建以后，内容和长度不能更改。<br>NSMutableString，可变字符串，即：创建以后，内容还可以修改。<br>创建一个新的字符串，可以使用实例方法和便利构造器。<br>NSString使用方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">NSString * tes：t =@&quot;1234567&quot;;</div><div class="line">NSLog(@&quot;%lu&quot;,(unsigned long)[test length]);//字符串长度</div><div class="line">NSLog(@&quot;%c&quot;,[test characterAtIndex:1]);//根据索引得到单个字符</div><div class="line">NSLog(@&quot;%@&quot;,[test substringFromIndex:1]);//截取某个字符串从开始到结束</div><div class="line">NSRange nr=&#123;1,3&#125;;//1 (索引位置) 3（截取的长度）</div><div class="line">NSLog(@&quot;%@&quot;,[test substringWithRange:nr]);//包含该索引的位置</div><div class="line">NSString * result=[test substringWithRange:nr];</div><div class="line">NSLog(@&quot;%@&quot;,[result stringByAppendingString:@&quot;dd&quot;]);//添加新内容</div><div class="line">if(test == nil || test.length)&#123;</div><div class="line">   //判断是否为空</div><div class="line">&#125;</div><div class="line">if([test isEqualToString:result])&#123;</div><div class="line">    //比较俩个字符串内容是否相同</div><div class="line">&#125;</div><div class="line">int a = 10;</div><div class="line">NSLog(@&quot;%@&quot;,[NSString stringWithFormat:@&quot;%d&quot;,a]);//基本数据类型转换字符串</div><div class="line">NSLog(@&quot;%i&quot;,[test intValue]);//字符串转基本数据类型</div><div class="line">NSLog(@&quot;%f&quot;,[test floatValue]);//字符串转浮点类型</div><div class="line">NSLog(@&quot;%@&quot;,[result uppercaseString]);//将字符串的字母转换成大写</div><div class="line">NSLog(@&quot;%@&quot;,[result lowercaseString]);//将字符串的字母转换成小写</div></pre></td></tr></table></figure></p>
<p>NSMutableString使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSMutableString * str = [NSMutableString stringWithString:@&quot;有钱任性，没钱任命&quot;]; //可变字符串创建</div><div class="line">[str appendString:@&quot;aaa&quot;];//添加普通的字符串</div><div class="line">[str appendFormat:@&quot;我的名字：%@ 我的年龄：%d&quot;,@&quot;ding&quot;,24];//添加字符串 整形</div></pre></td></tr></table></figure></p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组的遍历：有三种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray * na =[[NSArray alloc] initWithObjects:@&quot;11&quot;,@&quot;22&quot;,@&quot;33&quot;, nil];</div></pre></td></tr></table></figure></p>
<p>第一种是普通for<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">for (int i=0; i&lt;[na count]; i++) &#123;</div><div class="line">     NSLog(@&quot;%@&quot;,[na objectAtIndex:i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">NSMutableArray * nma = [[NSMutableArray alloc] init];</div><div class="line">[nma addObject:@&quot;abc&quot;];</div><div class="line">[nma addObject:@&quot;cba&quot;];</div><div class="line">[nma insertObject:@&quot;2&quot; atIndex:1];</div><div class="line">[nma removeObject:0];</div><div class="line">[nma objectAtIndex:2];</div><div class="line">NSNumber * nsn=[[NSNumber alloc] initWithInt:3];</div><div class="line">nma addObject:nsn];</div></pre></td></tr></table></figure></p>
<p>第二种增强for<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (NSObject *o in nma) &#123;</div><div class="line">     NSLog(@&quot;%@&quot;,o);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三种迭代器(效率最高)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSEnumerator * ne = [nma objectEnumerator];</div><div class="line">id object;</div><div class="line">while (object = [ne nextObject]) &#123;</div><div class="line">     NSLog(@&quot;数组中的对象：%@&quot;,object);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典类的特点：<br>  与数组不同，字典靠key存取元素。<br>  key不能重复，value必须是对象。<br>  键值对在字典中是无序存储。<br>  字典分：不可变字典（NSDictionary）  可变字典（NSMutableDictionary）<br>NSDictionary：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//初始化俩个元素</div><div class="line">NSDictionary * nsd = [NSDictionary dictionaryWithObjectsAndKeys:</div><div class="line">                      @&quot;zhangsab&quot;,@&quot;2&quot;,@&quot;wangwu&quot;,@&quot;1&quot;, nil];</div><div class="line">//第一种方式：得到所有键的集合</div><div class="line">//第一种遍历普通for</div><div class="line">for (int i =0; i&lt;[nsd count]; i++) &#123;</div><div class="line">    NSObject * key = [nsd allKeys][i];</div><div class="line">    NSObject * value = [nsd objectForKey:key];</div><div class="line">    NSLog(@&quot;i=%d  key=%@  value=%@&quot;,i,key,value);</div><div class="line">&#125;</div><div class="line">//第二中遍历增强for</div><div class="line">for(NSObject * no in [nsd allKeys])&#123;</div><div class="line">    NSObject * value = [nsd objectForKey:no];</div><div class="line">    NSLog(@&quot;key=%@  value=%@&quot;,no,value);</div><div class="line">&#125;</div><div class="line">//第三种遍历 迭代器最好</div><div class="line">NSEnumerator * ne = [[nsd allKeys] objectEnumerator];</div><div class="line">NSObject * object;</div><div class="line">while (object = [ne nextObject]) &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;key=%@  value=%@&quot;,object,[nsd objectForKey:object]);</div><div class="line">&#125;</div><div class="line"> //第二种方式：得到所有值的集合</div><div class="line">for(int i =0;i&lt;[[nsd allValues] count];i++)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,[nsd allValues][i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NSMutableDictionary：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//便利构造器，初始化有十个长度的字典，实际长度可变</div><div class="line">NSMutableDictionary * nsmd = [NSMutableDictionary dictionaryWithCapacity:10];</div><div class="line">[nsmd setObject:@&quot;lishi&quot; forKey:@&quot;2&quot;];//添加</div><div class="line">[nsmd setObject:@&quot;wanger&quot; forKey:@&quot;1&quot;];</div><div class="line"></div><div class="line">for(NSObject * no in [nsmd allKeys])&#123;</div><div class="line">    NSObject * value = [nsmd objectForKey:no];</div><div class="line">    NSLog(@&quot;key=%@  value=%@&quot;,no,value);</div><div class="line">&#125;</div><div class="line">[nsmd removeObjectForKey:@&quot;1&quot;];//根据指定KEY删除</div><div class="line"></div><div class="line">for(int i =0;i&lt;[[nsmd allValues] count];i++)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,[nsmd allValues][i]);</div><div class="line">&#125;</div><div class="line">[nsmd removeAllObjects];//删除掉所有数据</div></pre></td></tr></table></figure></p>
<h2 id="块和字面量"><a href="#块和字面量" class="headerlink" title="块和字面量"></a>块和字面量</h2><p>块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> __block int c=1;</div><div class="line"></div><div class="line">int (^Sum)(int,int)=^(int a,int b)&#123;</div><div class="line">    c++;</div><div class="line">    return a+b+c;</div><div class="line">&#125;;</div><div class="line">NSLog(@&quot;%i&quot;,Sum(10,11));</div><div class="line"></div><div class="line">NSString *stopName =@&quot;王五&quot;;</div><div class="line">NSArray * array = @[@&quot;张三&quot;,@&quot;李四&quot;,@&quot;王五&quot;,@&quot;赵六&quot;,@&quot;王二&quot;];</div><div class="line">/**</div><div class="line">  *  快方法遍历数组</div><div class="line">  *</div><div class="line">  *  @param obj  对象</div><div class="line">  *  @param idx  索引</div><div class="line">  *  @param STOP 是否接受</div><div class="line">  *</div><div class="line">  *  @return return value description</div><div class="line">  */</div><div class="line">[array enumerateObjectsUsingBlock:^(id obj,NSUInteger idx ,BOOL * STOP)&#123;</div><div class="line">    NSLog(@&quot;第%d项内容是%@&quot;,(int)idx,obj);</div><div class="line">    if ([stopName isEqualToString:obj] || idx == pIndex) &#123;</div><div class="line">        *STOP = YES;</div><div class="line">    &#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>字面量：是一种简易表示值的方法；</p>
<p><img src="/img/IOS/ios_zimianliang.png" alt=""></p>
<h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><p>在正常情况下：访问类中的成员<br>第一种是：-&gt;<br>第二种是：[]<br>不像其它语言：.不支持<br>当定义成属性之后，就可以使用.语法</p>
<h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p>继承和类别的区别<br>类别：能添加方法、特征、不能添加属性<br>继承：能添加方法、特征、属性<br>类别添加的方法，是原始类的一部分<br>继承是新类[子类]添加了一个方法，父类什么都没有变化<br>类别跟原类没有区别<br>继承必须要使用子类，才能用其方法<br>好处：遵守了开闭原则<br>避免：方法同名（如果同名，新增优先）</p>
<h2 id="延展"><a href="#延展" class="headerlink" title="延展"></a>延展</h2><p>为了方法不声明就可以直接调用，通过类目的形式实现延展在实际开发中不用，了解即可</p>
<h2 id="代理模式（delegate代理）"><a href="#代理模式（delegate代理）" class="headerlink" title="代理模式（delegate代理）"></a>代理模式（delegate代理）</h2><p>解决问题：本身自己做不了的事情，找一个代理商替自己完成，这种模式就教代理模式。<br>1.构成：协议、代理商、委托者<br>2.委托过程：委托，找到符合协议的，代理商区完成特点的行为。</p>
<h2 id="通知中心"><a href="#通知中心" class="headerlink" title="通知中心"></a>通知中心</h2><p>分为：<br>1.发布通知<br>2.注册通知，被注册的方法，自动执行</p>
<h2 id="初级内存管理"><a href="#初级内存管理" class="headerlink" title="初级内存管理"></a>初级内存管理</h2><h3 id="造成闪退的原因："><a href="#造成闪退的原因：" class="headerlink" title="造成闪退的原因："></a>造成闪退的原因：</h3><p>1.内存溢出<br>2.野指针异常</p>
<h3 id="内存管理的方式："><a href="#内存管理的方式：" class="headerlink" title="内存管理的方式："></a>内存管理的方式：</h3><p>1.垃圾回收（GC）：程序员只需要开辟内存空间，不需要用代码显示地释放，系统来判断哪些空间不在被使用，<br>2.引用计数（Manual Reference Count）：内存的开辟和释放都由程序代码进行控制。相对垃圾回收来说，对内存的控制更加灵活，可以在需要释放的时候及时释放，对程序员的要求较高，要熟悉内存管理的机制。<br>3.自动引用计数（Auto Reference Count）：IOS 5.0的编译器特性，它允许用户只开辟空间，不用去释放空间。它不是垃圾回收！它的本质还是MRC，只是编译器帮程序员默认加了释放的代码。</p>
<h3 id="黄金法则："><a href="#黄金法则：" class="headerlink" title="黄金法则："></a>黄金法则：</h3><p>当调用了alloc、new、copy、retain一次，使用完该对象，相应的应该调用release、autorelease一次。即增加方法与减少方法需要配对使用。<br>内存管理主要解决两个问题：野指针与内存泄露<br>1.野指针：一般理解的野指针概念指的是对象已被释放或指针变量指向的对象已不存在，然后向该对象发出一个SEL消息，导致app异常退出。<br>2.内存泄漏：在堆上分配一个对象使用完成后，程序员忘记手动释放或是对象之间存在相互strong引用关系，程序已退出，而对象还未被销毁问题。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1：没有使用的对象，不需要释放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Persom * p = [[Persom alloc] init];</div><div class="line">NSString * name = p.pName;</div><div class="line">[p release];</div><div class="line">[name release];</div></pre></td></tr></table></figure></p>
<p>2：以个方法返回一个对象是，对象会自动释放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (NSString * )gexx&#123;</div><div class="line">    NSString * str=[[[NSString alloc]initWithFormat:@&quot;%@&quot;,@&quot;123&quot;]autorelease];</div><div class="line">    return str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3:不是自己创建的对象，而是通过引用传递产生的对象，不需要释放</p>
<pre><code class="Objective-C">NSError * error;
NSString * str = [[NSString alloc] initWithContentsOfFile:nameencoding:NSUTF8StringEncoding error:&amp;error];
if (str==nil) {
  //处理错误
}    
[str release];
</code></pre>
<p>4：实现开发中不要自作聪明，自己写销毁方法<br>5：不要尝试去集合中的数据进行内存管理<br>6：父对象被销毁，子对象也跟着销毁，不必自己在释放</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>内存管理三个方法：GC、MRC、ARC(IOS使用MRC、ARC)<br>内存管理的方法：alloc、new、copy计数器1<br>                             retain +1<br>                             release -1<br>                             autorelease 某一时刻自动-1<br>                             retacount返回某个对象计数器值，一般不调用这个方法<br>                             当计数器为0，会执行dealloc方法<br>黄金法则：谁创建谁释放</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android混淆详解]]></title>
      <url>http://dalingge.com/2016/05/05/Android%E6%B7%B7%E6%B7%86%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>当前是有些工具比如apktool，dextojar等是可以对我们android安装包进行反编译，获得源码的。为了减少被别人破解，导致源码泄露，程序被别人盗取代码，等等。我们需要对代码进行混淆，android的sdk中为我们提供了ProGrard这个工具，可以对代码进行混淆（一般是用无意义的名字来重命名），以及去除没有使用到的代码，对程序进行优化和压缩，这样可以增加你想的难度。</p>
<h2 id="Tag-未整理"><a href="#Tag-未整理" class="headerlink" title="Tag 未整理"></a>Tag 未整理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-keepnames <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">packagename</span>.<span class="title">ClassName</span>$* </span>&#123;</div><div class="line">    <span class="keyword">public</span> &lt;fields&gt;;</div><div class="line">    <span class="keyword">public</span> &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式可以禁止混淆内部类。</p>
<h2 id="如何启用ProGuard"><a href="#如何启用ProGuard" class="headerlink" title="如何启用ProGuard"></a>如何启用ProGuard</h2><p>在build.gradle中进行配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">runProguard <span class="keyword">true</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>，'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上面的代码所示，在release打包时就会按照我们的配置进行混淆，注意，在我们平时的debug时是不会进行混淆的。</p>
<h2 id="如何配置ProGuard"><a href="#如何配置ProGuard" class="headerlink" title="如何配置ProGuard"></a>如何配置ProGuard</h2><p>具体详情请查看官网：<a href="http://proguard.sourceforge.net/" target="_blank" rel="external">http://proguard.sourceforge.net/</a></p>
<h3 id="部分语法"><a href="#部分语法" class="headerlink" title="部分语法"></a>部分语法</h3><p>后面的文件名，类名，或者包名等可以使用占位符代替<br>“?”表示一个字符 可以匹配多个字符，但是如果是一个类，不会匹配其前面的包名<br>“*”可以匹配多个字符，会匹配前面的包名。</p>
<ul>
<li>输入输出选项<ul>
<li>-include filename 从给定的文件中读取配置参数</li>
<li>-injars class_path输入(即使用的) jar文件路径</li>
<li>-outjars class_path输出 jar 路径</li>
<li>-libraryjars class_path指定的jar将不被混淆</li>
<li>-skipnonpubliclibraryclasses跳过(不混淆) jars中的 非public classes</li>
<li>-dontskipnonpubliclibraryclasses不跳过(混淆) jars中的 非public classes默认选项</li>
<li>-dontskipnonpubliclibraryclassmembers不跳过 jars中的非public classes的members</li>
<li>-keepdirectories [directory_filter]指定目录 keep 在 out jars中</li>
</ul>
</li>
<li>保持不变的选项（混淆不进行处理的内容）<ul>
<li>-keep {Modifier} {class_specification}保护指定的类文件和类的成员</li>
<li>-keepclassmembers {modifier} {class_specification}保护指定类的成员，如果此类受到保护他们会保护的更好</li>
<li>-keepclasseswithmembers {class_specification}保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。</li>
<li>-keepnames {class_specification}保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除）</li>
<li>-keepclassmembernames {class_specification}保护指定的类的成员的名称（如果他们不会压缩步骤中删除）</li>
<li>-keepclasseswithmembernames {class_specification}保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）</li>
<li>-printseeds {filename} 列出类和类的成员-keep选项的清单，标准输出到给定的文件</li>
</ul>
</li>
<li>压缩选项<ul>
<li>-dontshrink不启用shrink。shrink操作默认启用，主要的作用是将一些无效代码给移除，即没有被显示调用的代码。</li>
<li>-printusage [filename]打印被移除的代码，在标准输出</li>
<li>-whyareyoukeeping class_specification打印 在shrink过程中 为什么有些代码被 keep</li>
</ul>
</li>
<li>优化选项<ul>
<li>-dontoptimize 该选项表示不启用。optimization，默认启用当不使用该选项时，下面的才有效</li>
<li>-optimizations optimization_filter 根据optimization_filter指定要优化的文件</li>
<li>-optimizationpasses n 优化数量 n</li>
<li>-assumenosideeffects class_specification 优化时允许访问并修改类和类的成员的 访问修饰符，可能作用域会变大。</li>
<li>-mergeinterfacesaggressively 合并接口，即使它们的实现类未实现合并后接口的所有方法。</li>
</ul>
</li>
<li>混淆选项<ul>
<li>-dontobfuscate 不混淆</li>
<li>-printmapping [filename] 打印 映射旧名到新名</li>
<li>-applymapping filename 打印相关</li>
<li>-obfuscationdictionary filename 指定外部模糊字典</li>
<li>-classobfuscationdictionary filename 指定class模糊字典</li>
<li>-packageobfuscationdictionary filename 指定package模糊字典</li>
<li>-overloadaggressively 过度加载，多个属性和方法使用相同的名字，只是参数和返回类型不同可能各种异常</li>
<li>-useuniqueclassmembernames 类和类成员都使用唯一的名字</li>
<li>-dontusemixedcaseclassnames 不使用大小写混合类名</li>
<li>-keeppackagenames [package_filter] 保持packagename 不混淆</li>
<li>-flattenpackagehierarchy [package_name] 指定重新打包,所有包重命名,这个选项会进一步模糊包名 好东西 将包里的类混淆成n个再重新打包到一个个的package中，注：混淆是有用，但是我用的时候安装会崩溃，不知道为什么？</li>
<li>-repackageclasses [package_name] 将包里的类混淆成n个再重新打包到一个统一的package中会覆盖flattenpackagehierarchy选项</li>
<li>-keepattributes [attribute_filter] 混淆时可能被移除下面这些东西，如果想保留，需要用该选项。“Annotation、Exceptions, Signature, Deprecated, SourceFile, SourceDir,LineNumberTable” 预校验选项</li>
<li>-dontpreverify 不预校验，默认选项</li>
</ul>
</li>
<li>通用选项<ul>
<li>-verbose 打印日志</li>
<li>-dontnote [class_filter] 不打印某些错误</li>
<li>-dontwarn [class_filter] 不打印警告信息</li>
<li>-ignorewarnings 忽略警告，继续执行</li>
<li>-printconfiguration [filename] 打印配置文件</li>
<li>-dump [filename] 指定打印类结构</li>
</ul>
</li>
</ul>
<h3 id="Demo实例"><a href="#Demo实例" class="headerlink" title="Demo实例"></a>Demo实例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">##--- For:android默认 ---</div><div class="line">-optimizationpasses 5  # 指定代码的压缩级别</div><div class="line">-allowaccessmodification #优化时允许访问并修改有修饰符的类和类的成员</div><div class="line">-dontusemixedcaseclassnames  # 是否使用大小写混合</div><div class="line">-dontskipnonpubliclibraryclasses  # 是否混淆第三方jar</div><div class="line">-dontpreverify  # 混淆时是否做预校验</div><div class="line">-verbose    # 混淆时是否记录日志</div><div class="line">-ignorewarnings  # 忽略警告，避免打包时某些警告出现</div><div class="line">-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*  # 混淆时所采用的算法</div><div class="line"></div><div class="line">-keepattributes *Annotation*</div><div class="line">-keep public class com.google.vending.licensing.ILicensingService</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line">-keepclasseswithmembernames class * &#123; # 保持 native 方法不被混淆</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers public class * extends android.view.View &#123;</div><div class="line">   void set*(***);</div><div class="line">   *** get*();</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class * extends android.app.Activity &#123;</div><div class="line">   public void *(android.view.View);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers enum * &#123;  # 保持枚举 enum 类不被混淆</div><div class="line">    public static **[] values();</div><div class="line">    public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keep class * implements android.os.Parcelable &#123; # 保持 Parcelable 不被混淆</div><div class="line">  public static final android.os.Parcelable$Creator *;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-keepclassmembers class **.R$* &#123; #不混淆R文件</div><div class="line">    public static &lt;fields&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-dontwarn android.support.**</div><div class="line">##--- End android默认 ---</div><div class="line"></div><div class="line">##--- For:不能被混淆的 ---</div><div class="line">-keep public class * extends android.app.Activity</div><div class="line">-keep public class * extends android.app.Fragment</div><div class="line">-keep public class * extends android.app.Application</div><div class="line">-keep public class * extends android.app.Service</div><div class="line">-keep public class * extends android.content.BroadcastReceiver</div><div class="line">-keep public class * extends android.content.ContentProvider</div><div class="line">-keep public class * extends android.app.backup.BackupAgentHelper</div><div class="line">-keep public class * extends android.preference.Preference</div><div class="line"></div><div class="line">##--- For:保持自定义控件类不被混淆 ---</div><div class="line">-keepclasseswithmembers class * &#123;</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">&#125;</div><div class="line">-keepclasseswithmembers class * &#123;</div><div class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">##--- For:android-support-v4 ---</div><div class="line">-dontwarn android.support.v4.**</div><div class="line">-keep class android.support.v4.** &#123; *; &#125;</div><div class="line">-keep interface android.support.v4.app.** &#123; *; &#125;</div><div class="line">-keep class * extends android.support.v4.** &#123; *; &#125;</div><div class="line">-keep public class * extends android.support.v4.**</div><div class="line">-keep public class * extends android.support.v4.widget</div><div class="line">-keep class * extends android.support.v4.app.** &#123;*;&#125;</div><div class="line">-keep class * extends android.support.v4.view.** &#123;*;&#125;</div><div class="line"></div><div class="line">##--- For:Serializable ---</div><div class="line">-keep class * implements java.io.Serializable &#123;*;&#125;</div><div class="line">-keepnames class * implements java.io.Serializable</div><div class="line">-keepclassmembers class * implements java.io.Serializable &#123;*;&#125;</div><div class="line"></div><div class="line">##--- For:Gson ---</div><div class="line">-keepattributes *Annotation*</div><div class="line">-keep class sun.misc.Unsafe &#123; *; &#125;</div><div class="line">-keep class com.idea.fifaalarmclock.entity.***</div><div class="line">-keep class com.google.gson.stream.** &#123; *; &#125;</div><div class="line"></div><div class="line">##--- For:Remove log ---</div><div class="line">-assumenosideeffects class android.util.Log &#123;</div><div class="line">    public static boolean isLoggable(java.lang.String, int);</div><div class="line">    public static int v(...);</div><div class="line">    public static int i(...);</div><div class="line">    public static int w(...);</div><div class="line">    public static int d(...);</div><div class="line">    public static int e(...);</div><div class="line">&#125;</div><div class="line"></div><div class="line">##--- For:attributes(未启用) ---</div><div class="line">#-keepattributes SourceFile,LineNumberTable # 保持反编译工具能看到代码的行数，以及release包安装后出现异常信息可以知道在哪行代码出现异常，建议不启用</div><div class="line">-keepattributes *Annotation* #使用注解</div><div class="line">-keepattributes Signature #过滤泛型  出现类型转换错误时，启用这个</div><div class="line">#-keepattributes *Exceptions*,EnclosingMethod  #没试过，未知效果</div></pre></td></tr></table></figure>
<h3 id="如何查看ProGuard输出文件"><a href="#如何查看ProGuard输出文件" class="headerlink" title="如何查看ProGuard输出文件"></a>如何查看ProGuard输出文件</h3><p>混淆之后，会给我们输出一些文件，在gradle方式下是在/build/proguard/目录下，ant是在/bin/proguard目录，eclipse构建在/proguard目录像。 分别有以下文件：</p>
<ul>
<li>dump.txt 描述apk文件中所有类文件间的内部结构。</li>
<li>mapping.txt 列出了原始的类，方法，和字段名与混淆后代码之间的映射。</li>
<li>seeds.txt 列出了未被混淆的类和成员</li>
<li>usage.txt 列出了从apk中删除的代码</li>
</ul>
<p>当我们发布的release版本的程序出现bug时，可以通过以上文件（特别时mapping.txt）文件找到错误原始的位置，进行bug修改。 同时，可能一开始的proguard配置有错误，也可以通过错误日志，根据这些文件，找到哪些文件不应该混淆，从而修改proguard的配置。</p>
<h2 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h2><ul>
<li>美团 <a href="http://tech.meituan.com/mt-android-resource-obfuscation.html" target="_blank" rel="external">http://tech.meituan.com/mt-android-resource-obfuscation.html</a></li>
<li>微信:<a href="http://mp.weixin.qq.com/s?biz=MzAwNDY1ODY2OQ==&amp;mid=208135658&amp;idx=1&amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f&amp;scene=0#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?biz=MzAwNDY1ODY2OQ==&amp;mid=208135658&amp;idx=1&amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f&amp;scene=0#rd</a></li>
</ul>
<p>注意：重新release编译后，这些文件会被覆盖，所以没发布程序，最好都保存一份配置文件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android学习之路]]></title>
      <url>http://dalingge.com/2016/04/12/Android%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>收集整理Android开发资料，这份资料我会不断的更新完善, 该份学习资料有不足的地方, 也请指出, 我会谦虚接受改正, 希望我能与大家一起来学习, 谢谢。</p>
<p><strong>如果您有任何意见或建议也可以通过<a href="mailto:445850053@qq.com" target="_blank" rel="external">邮件</a>联系我</strong></p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a><a href="#开源项目" title="开源项目"></a>开源项目</h2><p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a><br>Retrofit和Java领域的ORM概念类似， ORM把结构化数据转换为Java对象，而Retrofit 把REST API返回的数据转化为Java对象方便操作。同时还封装了网络代码的调用。</p>
<ul>
<li><a href="http://blog.chengyunfeng.com/?p=491" target="_blank" rel="external">Retrofit – Java(Android) 的REST 接口封装类库</a></li>
<li><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava 与 Retrofit 结合的最佳实践</a></li>
<li><a href="https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">用Retrofit2简化HTTP请求</a></li>
</ul>
<p><a href="http://square.github.io/okhttp/" target="_blank" rel="external">OKHttp</a><br>OKHttp是Android版Http客户端。非常高效，支持SPDY、连接池、GZIP和 HTTP 缓存。默认情况下，OKHttp会自动处理常见的网络问题，像二次连接、SSL的握手问题。如果你的应用程序中集成了OKHttp，Retrofit默认会使用OKHttp处理其他网络层请求。</p>
<ul>
<li><a href="http://www.jianshu.com/p/aad5aacd79bf" target="_blank" rel="external">OkHttp3源码分析</a></li>
<li><a href="http://blog.piasy.com/2016/07/11/Understand-OkHttp/" target="_blank" rel="external">拆轮子系列：拆 OkHttp</a></li>
</ul>
<p><a href="https://realm.io/cn/" target="_blank" rel="external">Realm</a><br>Realm并不是一个建立在SQLite之上的ORM，而是一个基于自己的持久化引擎，简单并且快速的面向对象移动数据库。</p>
<p><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide </a><br>Glide是一款基于Android的图片加载和图片缓存组件，它可以最大性能地在Android设备上读取、解码、显示图片和视频。Glide可以将远程的图片、视频、动画图片等缓存在设备本地，便于提高用户浏览图片的流畅体验。</p>
<ul>
<li><a href="http://mrfu.me/2016/02/27/Glide_Getting_Started/" target="_blank" rel="external">Glide - 开始！</a></li>
</ul>
<p><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a><br>RxJava是一个响应式编程框架，采用观察者设计模式。所以自然少不了 Observable 和 Subscriber 这两个东东了。</p>
<ul>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="http://rxmarbles.com" target="_blank" rel="external">图解 Rx 操作符，一眼就看懂</a></li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">ReactiveX/RxJava文档中文版</a></li>
</ul>
<p><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a><br>RxAndroid是响应式扩展框架的Android实现，将大量的类绑定到RxJava，使得在Android应用中编写响应式组件变得非常简单。</p>
<h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a><a href="#Awesome-系列" title="Awesome 系列"></a>Awesome 系列</h2><ul>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">awesome android(1)</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome_android(2)</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome_android_UI</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">awesome_android_libraries</a></li>
<li><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="external">awesome_java</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">awesome_materialdesign</a></li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome 系列之终极版</a></li>
<li><a href="https://github.com/liaohuqiu/android-dynamic-load-awesome" target="_blank" rel="external">android-dynamic-load-awesome</a></li>
</ul>
<h2 id="动画系列"><a href="#动画系列" class="headerlink" title="动画系列"></a><a href="#动画系列" title="动画系列"></a>动画系列</h2><ul>
<li><a href="https://github.com/hitherejoe/animate" target="_blank" rel="external">animate</a></li>
<li><a href="https://github.com/Animatious/awesome-animation" target="_blank" rel="external">awesome-animation</a></li>
<li><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material-Animations</a></li>
<li><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></li>
</ul>
<h2 id="Material-Design-设计"><a href="#Material-Design-设计" class="headerlink" title="Material Design 设计"></a><a href="#Material-Design-设计" title="Material Design 设计"></a>Material Design 设计</h2><ul>
<li><a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design 教程</a></li>
<li><a href="https://github.com/1sters/material_design_zh_2" target="_blank" rel="external">Material Design 教程(中文版)</a></li>
<li><a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">Material Design Android Library </a>(Material Design 开源库, 很多效果可以直接拿来用)</li>
<li><a href="http://www.aplesson.com/?p=650" target="_blank" rel="external">十大Material Design开源项目</a></li>
</ul>
<h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a><a href="#素材" title="素材"></a>素材</h2><ul>
<li><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="external">常用色彩搭配表</a></li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li>
<li><a href="http://www.materialpalette.com/" target="_blank" rel="external">在线 Material Design 界面调色板</a></li>
<li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Design设计模板与素材</a></li>
<li><a href="https://icons8.com/" target="_blank" rel="external">App Icon 图标</a></li>
<li><a href="https://iconstore.co/" target="_blank" rel="external">Icon Store</a></li>
<li><a href="https://design.google.com/icons/" target="_blank" rel="external">Material icons</a></li>
<li><a href="http://iconfont.cn/" target="_blank" rel="external">Iconfont</a></li>
<li><a href="http://jaqen.me/mdpub/" target="_blank" rel="external">Android Material 材料风格图标LOGO生成器</a>(傻瓜式 Material Design 风格矢量图标生成器)</li>
</ul>
<h2 id="开源库收集"><a href="#开源库收集" class="headerlink" title="开源库收集"></a><a href="#开源库收集" title="开源库收集"></a>开源库收集</h2><ul>
<li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries and Resources </a></li>
<li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal </a>(一个专门收集 android 开源库的网站, 网站经常更新)</li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目汇总 </a>(Trinea 大神收集的)</li>
<li><a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="external">Android 开源项目源码分析 </a>(在懂得使用这些开源项目同时, 也应该了解当中的原理)</li>
<li><a href="http://www.jcodecraeer.com/plus/list.php?tid=31" target="_blank" rel="external">泡在网上的日子</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新的开始]]></title>
      <url>http://dalingge.com/2016/03/16/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<p>#有过那样一个我，那样的生活过。他的身影印在这个时代里。我看见他的传说。</p>
]]></content>
    </entry>
    
  
  
</search>
